security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: bcrypt
            cost: 13
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            id: App\Infrastructure\Security\User\Provider\JWTUserProvider
#            entity:
#                class: App\Domain\User\User
#                property: email
    role_hierarchy:
        ROLE_FREE_USER: ROLE_FREE_USER
        ROLE_ADVANCED: ROLE_ADVANCED_USER
        ROLE_PREMIUM: ROLE_PREMIUM_USER
        ROLE_SUPER_ADMIN: ROLE_SUPER_ADMIN





    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: user.api_login
                username_path: email
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            entry_point: jwt
            refresh_jwt:
                check_path: user.api_refresh
            access_denied_handler: App\Infrastructure\Symfony\EventListener\AccessDeniedListener

        main:
            lazy: true
            provider: app_user_provider
#            access_denied_handler: App\Application\EventListener\AccessDeniedListener

    access_control:
        - { path: ^/api/users/password, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/users, methods: [DELETE], roles: [ROLE_SUPER_ADMIN] }
        - { path: ^/api/admin, roles: [ROLE_SUPER_ADMIN] }
        - { path: ^/api/pictures, roles: [ROLE_SUPER_ADMIN] }
        - { path: ^/api, roles: PUBLIC_ACCESS }
#        - { path: ^/api, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#         - { path: ^/api/users, roles: [PUBLIC_ACCESS] }
#         - { path: ^/api/users, roles: [ROLE_FREE_USER], methods: [PUT] }
#         - { path: ^/api/users, roles: [ROLE_FREE_USER] }
#         - { path: ^/api/users, roles: [ROLE_SUPER_ADMIN] }
#         - { path: ^/api/users, roles: [IS_AUTHENTICATED_FULLY] }
#         - { path: ^/login, roles: IS_AUTHENTICATED_FULLY }
#         - { path: ^/login, roles: PUBLIC_ACCESS }
#         - { path: ^/test, roles: IS_AUTHENTICATED_FULLY }
#         - { path: ^/test, roles: ROLE_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

#when@test:
#    security:
#        password_hashers:
#            # By default, password hashers are resource intensive and take time. This is
#            # important to generate secure password hashes. In tests however, secure hashes
#            # are not important, waste resources and increase test times. The following
#            # reduces the work factor to the lowest possible values.
#            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                algorithm: auto
#                cost: 4 # Lowest possible value for bcrypt
#                time_cost: 3 # Lowest possible value for argon
#                memory_cost: 10 # Lowest possible value for argon
